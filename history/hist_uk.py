from logger import *
import random
from datetime import datetime
from bot import *
import pytz
import requests
from telebot import types
import json
from db import db, add_presidents_uk_db


def send_historical_events_CHANNEL_UK_image(CHANNEL_UK):
    try:
        today = datetime.now(pytz.timezone('America/Sao_Paulo'))
        day = today.day
        month = today.month

        response = requests.get(
            f'https://uk.wikipedia.org/api/rest_v1/feed/onthisday/events/{month}/{day}'
        )
        events = response.json().get('events', [])
        events_with_photo = [
            event
            for event in events
            if event.get('pages') and event['pages'][0].get('thumbnail')
        ]

        random_event = random.choice(events_with_photo)
        event_text = random_event.get('text', '')
        event_year = random_event.get('year', '')


        if not events_with_photo:
            logger.info('N√£o h√° eventos com fotos para enviar hoje.')
            return

        random_event = random.choice(events_with_photo)
        caption = f'<b>üñº | –Ü–ª—é—Å—Ç—Ä–æ–≤–∞–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è </b>\n\n–£ <b>{day} {get_month_name(month)} {event_year}</b>\n\n<code>{event_text}</code>\n\n<blockquote>üí¨ –í–∏ –∑–Ω–∞–ª–∏? –ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—è –Ω–∞ @istoriya_uks.</blockquote>'

        options = {'parse_mode': 'HTML'}

        photo_url = random_event['pages'][0]['thumbnail']['source']
        bot.send_photo(CHANNEL_UK, photo_url, caption=caption, **options)
        logger.success(
            f'Evento hist√≥rico em foto enviado com sucesso para o canal ID {CHANNEL_UK}.'
        )
    except Exception as e:
        logger.error(f'Falha ao enviar evento hist√≥rico: {e}')


def hist_CHANNEL_UK_imgs():
    try:
        send_historical_events_CHANNEL_UK_image(CHANNEL_UK)
        logger.success(f'Mensagem enviada o canal {CHANNEL_UK}')
    except Exception as e:
        logger.error('Erro ao enviar o trabalho imgs:', str(e))


def get_month_name(month):
    month_names = [
        '–°—ñ—á–µ–Ω—å',
        '–õ—é—Ç–∏–π',
        '–ë–µ—Ä–µ–∑–µ–Ω—å',
        '–ö–≤—ñ—Ç–µ–Ω—å',
        '–¢—Ä–∞–≤–µ–Ω—å',
        '–ß–µ—Ä–≤–µ–Ω—å',
        '–õ–∏–ø–µ–Ω—å',
        '–°–µ—Ä–ø–µ–Ω—å',
        '–í–µ—Ä–µ—Å–µ–Ω—å',
        '–ñ–æ–≤—Ç–µ–Ω—å',
        '–õ–∏—Å—Ç–æ–ø–∞–¥',
        '–ì—Ä—É–¥–µ–Ω—å',
    ]
    return month_names[month]


def get_deaths_of_the_day(CHANNEL_UK):
    try:
        today = datetime.now()
        day = today.day
        month = today.month

        response = requests.get(
            f'https://uk.wikipedia.org/api/rest_v1/feed/onthisday/deaths/{month}/{day}',
            headers={
                'accept': 'application/json; charset=utf-8; profile="https://www.mediawiki.org/wiki/Specs/onthisday/0.3.3"'
            },
        )

        if response.status_code == 200:
            data = response.json()
            deaths = data.get('deaths', [])

            if len(deaths) > 0:
                death_messages = []

                for index, death in enumerate(deaths[:5], start=1):
                    name = f"<b>{death.get('text', '')}</b>"
                    info = death.get('pages', [{}])[0].get(
                        'extract', 'Informa√ß√µes n√£o dispon√≠veis.'
                    )
                    date = death.get('year', 'Data desconhecida.')

                    death_message = f'<i>{index}.</i> <b>–Ü–º\'—è:</b> {name}\n<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> {info}\n<b>–î–∞—Ç–∞ —Å–º–µ—Ä—Ç—ñ:</b> {date}'
                    death_messages.append(death_message)

                message = f'<b>‚ö∞Ô∏è | –°–º–µ—Ä—Ç—ñ —É —Ü–µ–π –¥–µ–Ω—å: {day} {get_month_name(month)}</b>\n\n'
                message += '\n\n'.join(death_messages)
                message += '\n\n<blockquote>üí¨ –í–∏ –∑–Ω–∞–ª–∏? –ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—è –Ω–∞ @istoriya_uks.</blockquote>'

                bot.send_message(CHANNEL_UK, message)
            else:

                logger.info(
                    'N√£o h√° informa√ß√µes sobre mortos para o dia atual.'
                )

        else:

            logger.warning('Erro ao obter informa√ß√µes:', response.status_code)

    except Exception as e:
        logger.error('Erro ao enviar mortos para os canal:', str(e))


def hist_CHANNEL_UK_death():
    try:
        get_deaths_of_the_day(CHANNEL_UK)
        logger.success(f'Mortos enviada o canal {CHANNEL_UK}')
    except Exception as e:
        logger.info('Erro ao enviar o trabalho mortes:', str(e))


def get_births_of_the_day(CHANNEL_UK):
    try:
        today = datetime.now(pytz.timezone('America/Sao_Paulo'))
        day = today.day
        month = today.month

        response = requests.get(
            f'https://uk.wikipedia.org/api/rest_v1/feed/onthisday/births/{month}/{day}',
            headers={
                'accept': 'application/json; charset=utf-8; profile="https://www.mediawiki.org/wiki/Specs/onthisday/0.3.3"'
            },
        )

        if response.status_code == 200:
            data = response.json()
            births = data.get('births', [])

            if len(births) > 0:
                birth_messages = []

                for index, birth in enumerate(births[:5], start=1):
                    name = f"<b>{birth.get('text', '')}</b>"
                    info = birth.get('pages', [{}])[0].get(
                        'extract', 'Informa√ß√µes n√£o dispon√≠veis.'
                    )
                    date = birth.get('year', 'Data desconhecida.')

                    birth_message = f'<i>{index}.</i> <b>–Ü–º\'—è:</b> {name}\n<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> {info}\n<b>–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:</b> {date}'
                    birth_messages.append(birth_message)

                message = f'<b>üéÇ | –ù–∞—Ä–æ–¥–∏–ª–∏—Å—è —É —Ü–µ–π –¥–µ–Ω—å: {day} {get_month_name(month)}</b>\n\n'
                message += '\n\n'.join(birth_messages)
                message += '\n\n<blockquote>üí¨ –í–∏ –∑–Ω–∞–ª–∏? –ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—è –Ω–∞ @istoriya_uks.</blockquote>'

                bot.send_message(CHANNEL_UK, message)
            else:

                logger.info('N√£o h√° informa√ß√µes sobre nascidos hoje.')

        else:

            logger.warning('Erro ao obter informa√ß√µes:', response.status_code)

    except Exception as e:
        logger.error('Erro ao obter informa√ß√µes:', str(e))


def hist_CHANNEL_UK_birth():
    try:
        get_births_of_the_day(CHANNEL_UK)
        logger.success(f'Nascidos enviada o canal {CHANNEL_UK}')
    except Exception as e:
        logger.error('Erro ao enviar o trabalho nascido:', str(e))


def get_historical_events():
    today = datetime.now()
    day = today.day
    month = today.month
    try:
        with open(
            'data/events-uk.json', 'r', encoding='utf-8'
        ) as file:

            json_events = json.load(file)
            events = json_events[f'{month}-{day}']
            if events:
                return '\n\n'.join(events)
            else:
                return None
    except Exception as e:
        logger.info('-' * 50)
        logger.error('Error reading events from JSON:', str(e))
        logger.info('-' * 50)
        return None


def send_historical_events_channel(CHANNEL_UK):
    try:
        today = datetime.now()
        day = today.day
        month = today.month
        events = get_historical_events()

        if events:
            message = f'<b>–°–¨–û–ì–û–î–ù–Ü –í –Ü–°–¢–û–†–Ü–á</b>\n\nüìÖ | –ü–æ–¥—ñ—è –≤ <b>{day}/{month}</b>\n\n{events}\n\n<blockquote>üí¨ –í–∏ –∑–Ω–∞–ª–∏? –ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—è –Ω–∞ @istoriya_uks.</blockquote>'
            bot.send_message(CHANNEL_UK, message)
        else:
            bot.send_message(
                CHANNEL_UK,
                '<b>–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</b>',
                parse_mode='HTML',
            )

            logger.info(
                f'Nenhum evento hist√≥rico para hoje no grupo {CHANNEL_UK}'
            )

    except Exception as e:
        logger.error('Erro ao enviar fatos hist√≥ricos para o canal:', str(e))


def hist_CHANNEL_UK_events():
    try:
        send_historical_events_channel(CHANNEL_UK)
        logger.success(f'Eventos hist√≥ricos enviada o canal {CHANNEL_UK}')
    except Exception as e:
        logger.error('Erro no trabalho de enviar fatos hist no canal:', str(e))


def message_CHANNEL_UK_alert():

    try:
        –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è = "üåü üì∫ <b>–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É —ñ—Å—Ç–æ—Ä—ñ—ó!</b> üì∫ üåü\n\n"\
            "–î—Ä—É–∑—ñ, –≤—ñ–¥–∫—Ä–∏–π—Ç–µ –¥–ª—è —Å–µ–±–µ —á–∞—Ä—ñ–≤–Ω—ñ—Å—Ç—å —ñ—Å—Ç–æ—Ä—ñ—ó —á–µ—Ä–µ–∑ –Ω–∞—à—ñ –∑–∞—Ö–æ–ø–ª—é—é—á—ñ —Ç–∞ –∑–∞—Ö–æ–ø–ª–∏–≤—ñ –∫–∞–Ω–∞–ª–∏! "\
            "–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –∑–∞—Ä–∞–∑, —â–æ–± –Ω–∞—Å–æ–ª–æ–¥–∏—Ç–∏—Å—è —à–∏—Ä–æ–∫–∏–º —Å–ø–µ–∫—Ç—Ä–æ–º –ø—Ä–æ–≥—Ä–∞–º —Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤, "\
            "—â–æ –≤–≤–µ–¥—É—Ç—å –≤–∞—Å —É –∑–∞—Ö–æ–ø–ª—é—é—á—É –ø–æ–¥–æ—Ä–æ–∂ —É –≥–ª–∏–±–∏–Ω–∏ —ñ—Å—Ç–æ—Ä—ñ—ó.\n\n"\
            "–í—ñ–¥—á—É–π—Ç–µ –¥–∞–≤–Ω—ñ –ø—Ä–∏–≥–æ–¥–∏, –∑–∞—Ö–æ–ø–ª—é—é—á—ñ —Ñ–∞–∫—Ç–∏ —Ç–∞ –∫–ª—é—á–æ–≤—ñ –ø–æ–¥—ñ—ó, —è–∫—ñ —Å—Ñ–æ—Ä–º—É–≤–∞–ª–∏ –Ω–∞—à —Å–≤—ñ—Ç. "\
            "–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—Å —Å—å–æ–≥–æ–¥–Ω—ñ –¥–ª—è –ø—Ä–∏—î–º–Ω–æ–≥–æ —Ç–∞ –ø—Ä–æ—Å–≤—ñ—Ç–Ω–∏—Ü—å–∫–æ–≥–æ –æ—Å–≤—ñ—Ç–Ω—å–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É!\n\n"\
            "üåç –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —Å–ø–∏—Å–∫—É —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤: [@history_channels]"\

        bot.send_message(
            CHANNEL_UK,
            –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è,
            parse_mode='HTML',
        )
    except Exception as e:
        logger.error(
            '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö —Ñ–∞–∫—Ç—ñ–≤ –¥–æ –∫–∞–Ω–∞–ª—É:', str(e))

def get_curiosity_UK(CHANNEL_UK):
    try:
        today = datetime.now()
        day = today.day
        month = today.month
        with open(
            './channel-historys/data/curiosity/curiosity-uk.json', 'r', encoding='utf-8'
        ) as file:
            json_events = json.load(file)
            curiosity = json_events.get(f'{month}-{day}', {}).get(
                'curiosity', []
            )
            if curiosity:
                info = curiosity[0].get('text', '')

                # For 2025 (uncomment this line and comment the line above)
                # info = curiosidade[1].get("texto1", "")
                message = f'<b>–Ü—Å—Ç–æ—Ä–∏—á–Ω–∞ —Ü—ñ–∫–∞–≤–∏–Ω–∫–∞ üìú</b>\n\n{info}\n\n<blockquote>üí¨ –ß–∏ –∑–Ω–∞–ª–∏ –≤–∏? –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ @hoy_en_la_historia.</blockquote>'
                bot.send_message(CHANNEL_UK, message)
            else:

                logger.info('–ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.')

    except Exception as e:

        logger.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:', str(e))


def hist_channel_curiosity_UK():
    try:
        get_curiosity_UK(CHANNEL_UK)

        logger.success(f'–¶—ñ–∫–∞–≤–∏–Ω–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –¥–æ –∫–∞–Ω–∞–ª—É {CHANNEL_UK}')

    except Exception as e:

        logger.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ü—ñ–∫–∞–≤–∏–Ω–∫–∏ –¥–æ –∫–∞–Ω–∞–ª—É:', str(e))

with open(
    './data/presidents/presidents-uk.json', 'r', encoding='utf-8'
) as file:
    presidents = json.load(file)


def send_president_photo_UK():
    try:
        if db.presidents_uk.count_documents({}) == 0:
            president = presidents.get('1')
            new_id = 1
            new_date = datetime.now(
                pytz.timezone('America/Sao_Paulo')
            ).strftime('%Y-%m-%d')
            add_presidents_uk_db(new_id, new_date)
            send_info_through_channel_UK(president)
        else:
            last_president = (
                db.presidents_uk.find().sort([('_id', -1)]).limit(1)[0]
            )
            last_id = last_president['id']
            sending_date = datetime.strptime(
                last_president['date'], '%Y-%m-%d'
            )

            today = datetime.now(pytz.timezone('America/Sao_Paulo'))
            today_str = today.strftime('%Y-%m-%d')

            if last_president['date'] != today_str:

                logger.info(
                    'Updating information of the last president to the current date.'
                )

                next_id = last_id + 1
                next_president = presidents.get(str(next_id))
                if next_president:
                    db.presidents_uk.update_one(
                        {'date': last_president['date']},
                        {'$set': {'date': today_str}, '$inc': {'id': 1}},
                    )

                    send_info_through_channel_UK(next_president)
                else:

                    logger.error('No more presidents to send.')

            else:

                logger.info(
                    "It's not time yet to send information about the next president."
                )

    except Exception as e:

        logger.error(
            f'An error occurred while sending president information: {str(e)}'
        )


def send_info_through_channel_UK(president_info):
    try:
        title = president_info.get('title', '')
        name = president_info.get('name', '')
        position = president_info.get('position', '')
        party = president_info.get('broken', '')
        term_year = president_info.get('year_of_office', '')
        vice_president = president_info.get('vice_president', '')
        photo = president_info.get('photo', '')
        where = president_info.get('local', '')

        caption = (
            f'<b>{title}</b>\n\n'
            f'<b>–Ü–º‚Äô—è:</b> {name}\n'
            f'<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> {position}¬∞ {title}\n'
            f'<b>–ü–∞—Ä—Ç—ñ—è:</b> {party}\n'
            f'<b>–†—ñ–∫ —É –≤–ª–∞–¥—ñ:</b> {term_year}\n'
            f'<b>–í—ñ—Ü–µ-–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç:</b> {vice_president}\n'
            f'<b>–ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è:</b> {where}\n\n'
            f'<blockquote>üí¨ –ó–Ω–∞—î—Ç–µ?</blockquote>'
        )

        logger.success('–§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!')

        bot.send_photo(
            CHANNEL_UK, photo=photo, caption=caption, parse_mode='HTML'
        )
    except Exception as e:

        logger.error(f'–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞: {str(e)}')
